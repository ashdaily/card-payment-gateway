using System.Net;
using System.Text;
using Newtonsoft.Json;
using PaymentGateway.Api.Models;

namespace PaymentGateway.Api.Tests;

public class PaymentIntegrationTests :  IClassFixture<CustomWebApplicationFactory>
{
    private readonly CustomWebApplicationFactory _factory;
    private readonly HttpClient _client;

    public PaymentIntegrationTests(CustomWebApplicationFactory factory)
    {
        _factory = factory;
        _client = factory.CreateClient();
    }

    [Fact]
    public async Task ProcessPayment_ReturnsSuccess_WhenPaymentDetailsAreValid()
    {
        // Arrange
        var paymentRequest = new PaymentRequest(
            null, // to be generated by Api itself
            Amount: 100,
            Currency: "GBP",
            CardNumber: "2222405343248877",
            ExpiryMonth: 04,
            ExpiryYear: 2025,
            Cvv: "123"
        );
        var content = new StringContent(JsonConvert.SerializeObject(paymentRequest), Encoding.UTF8, "application/json");

        // Act
        var response = await _client.PostAsync("/api/payment", content);

        // Assert
        Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        var responseString = await response.Content.ReadAsStringAsync();
        var paymentResponse = JsonConvert.DeserializeObject<PaymentResponse>(responseString);

        Assert.Equal("8877", paymentResponse.LastFourDigits);
        Assert.Equal(4u, paymentResponse.ExpiryMonth);
        Assert.Equal(2025u, paymentResponse.ExpiryYear);
        Assert.Equal("GBP", paymentResponse.Currency);
        Assert.Equal(100u, paymentResponse.Amount);
        Assert.Equal(PaymentStatus.Authorized, paymentResponse.Status);
        Assert.NotNull(paymentResponse.Id);
    }
    
    [Fact]
    public async Task GetPaymentDetails_ReturnsPaymentDetails_WhenIdIsValid()
    {
        // Arrange
        var paymentId = "123"; // ID that you have seeded in the database

        // Act
        var response = await _client.GetAsync($"/api/payment/{paymentId}");

        // Assert
        response.EnsureSuccessStatusCode();
        var paymentDetails = await response.Content.ReadAsStringAsync();
        var paymentResponse = JsonConvert.DeserializeObject<PaymentResponse>(paymentDetails);
        Assert.NotNull(paymentResponse);
        Assert.Equal(paymentId, paymentResponse.Id); // Ensure PaymentId matches
    }
}